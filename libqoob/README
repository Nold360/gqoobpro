=========
 LIBQOOB
=========

------------
INTRODUCTION
------------

libqoob provides easy way to communicate with Gamecube Qoob Pro mod chip via 
libusb. libqoob is part of the GQoobPro package which contains LGPL and GPL 
tools for Qoob Pro mod chip.

--------
QOOB PRO
--------

Qoob Pro is mod chip for Nintendo Gamecube with 2Mb(16MBit) internal flash 
memory. It is flashable via USB. Flash is splitted to 32 pieces, 64kb each. 
Qoob Pro bios starts at first slot and rest are freely usable. Last official 
qoob bios (1.3c) uses two slots.

----------------------
SUPPORTED FILE FORMATS
----------------------

GCB
---

GCB is Qoobs own format. There is special Qoob-flash header in it. GCB file
format is possible to detect by software.

DOL
---

DOL is Dolphin format which is used by commercial Gamecube games. DOL file
format is not possible to detect by software. It looks like random data.

ELF
---

ELF is file format what GCC usually outputs. ELF file format is possible to
detected by software.

------------
REQUIREMENTS
------------

* GNU/Linux, *BSD or MacOSX with macports
* libusb 0.1.12

------------------
OTHER REQUIREMENTS
------------------

Linux
-----

With Linux first you have to get Qoob Pro connected properly. There can be 
problems with kernel. Kernel might block usage of Qoob Pro by loading hid kernel
driver and libqoob can't claim the Qoob Pros USB-interface.

* Blacklist Qoob Pro from usbhid module

   Give options to the kernel-modules.

   Module options to usbhid "quirks=0x03eb:0x0001:0x00000004" 0x00000004 means
   ignoring 0x03eb:0x0001 totally. 0x03eb:0x0001 is Qoob Pro:s USB "address".

   Use "lsusb" to check if Qoob is connected. "dmesg" is also informative when 
   connecting USB devices.

   For example in Ubuntu and probably Debian easiest way to do this is to add 
   "options usbhid quirks=0x03eb:0x0001:0x00000004" to file in modprob.d
   directory "/etc/modprobe.d/qoobpro.conf". Confifure can be tested with
   command "rmmod usbhid && modprobe usbhid". No reboot required.

* Access with regular user to Qoob Pro USB device (optional)

   Normally users do not have access to USB devices. Problem is to find way how
   normal user get read and write permissions to USB-device with libusb.

* Giving access with udev

   Using udev new rule file should help. For example add following text to
   "86-qoobpro.rules" file and add it to same place with other udev rules.

-------------------------------------------------------------------------------
#
# udev rules file for Qoob Pro for libusb
#
SUBSYSTEMS!="usb", ACTION!="add", GOTO="qoobpro_rules_end"

# Qoob Pro
ATTRS{idVendor}=="03eb", ATTRS{idProduct}=="0001", GROUP="plugdev", MODE="0660"

LABEL="qoobpro_rules_end"
-------------------------------------------------------------------------------

   Rule can be found from data directory. Choose your group freely. Other 
   similar systems might be used instead of udev.

* Do you have different problems and/or know how to solve those? Tell me.


MacOSX
------

With MacOSX needs to get rid of OS:s control as well.

* Getting over Qoob Pro work with OSX:s libusb

Compile and install QoobProDriver kernel extension. Optionally just install it
if there is suitable version. After installation reboot the machine. Extension
is part of the GQoobPro package.

* After reboot OSX should not steal Qoobs USB interface anymore to itself and
normal user  should be able to use device.

-----------
TESTED WITH
-----------

Linux
-----

* Ubuntu Intrepid (64bit) with libusb 0.1.12.
* Debian Lenny (32bit PPC) with libusb 0.1.12

MacOSX
------

* OSX Panther 10.3.9 (PPC) with macports and libusb 0.1.12

----------
INSTALLING
----------

./configure
make
make install (as root) 

---------
COPYRIGHT
---------

libqoob is copyright (C) 2009-2018 Joni Valtanen <jvaltane@kapsi.fi>.

-------
LICENSE
-------

GNU Library General Public License version 2

----------
TRADEMARKS
----------

Gamecube(tm) is the registered trademark of the Nintendo.
All other trademarks are the property of their respective owners.
